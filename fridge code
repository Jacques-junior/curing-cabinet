#include "WiFi.h"
#include <WebServer.h>  
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <SPI.h>
#include <SD.h>
#include <ArduinoOTA.h>

// Wi-Fi credentials
const char* ssid = "Home Wifi 84";
const char* password = "BackOn84";

// DHT setup
#define DHTPIN 17
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);

#define BUTTON_PIN 0
#define on_off_PIN 13

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// Web server
WebServer server(80);  // Changed from AsyncWebServer to WebServer

// Data logging interval
unsigned long previousMillis = 0;
const long interval = 5000;
int tempaim = 10;

void handleRoot() {
  String html = "<h2>ESP32 Logging Server</h2><p><a href=\"/log\">Download Log</a></p>";
  server.send(200, "text/html", html);
}

void handleLogDownload() {
  if (SD.exists("/log.csv")) {
    File file = SD.open("/log.csv", FILE_READ);
    if (file) {
      server.sendHeader("Content-Type", "text/csv");
      server.sendHeader("Content-Disposition", "attachment; filename=log.csv");
      server.streamFile(file, "text/csv");
      file.close();
      return;
    }
  }
  server.send(404, "text/plain", "Log file not found");
}

void setup() {
  Serial.begin(115200);
  dht.begin();

  pinMode(14, OUTPUT);
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  pinMode(on_off_PIN, OUTPUT);

  digitalWrite(on_off_PIN, HIGH);

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected! IP address: ");
  Serial.println(WiFi.localIP());

  // Mount SD card
  if (!SD.begin(5)) {  // CS pin = 5
    Serial.println("SD card initialization failed!");
    return;
  }
  Serial.println("SD card initialized.");

  // Web server routes
  server.on("/", handleRoot);
  server.on("/log", handleLogDownload);
  server.begin();

  // OLED display setup
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println("OLED init failed");
    while (true);
  }
  display.clearDisplay();
  display.setTextColor(WHITE);
  
  // OTA Setup
  ArduinoOTA
    .onStart([]() {
      String type;
      if (ArduinoOTA.getCommand() == U_FLASH)
        type = "sketch";
      else // U_SPIFFS
        type = "filesystem";
      Serial.println("Start updating " + type); 
    })
    .onEnd([]() {
      Serial.println("\nEnd");
    })
    .onProgress([](unsigned int progress, unsigned int total) {
      Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
    })
    .onError([](ota_error_t error) {
      Serial.printf("Error[%u]: ", error);
      if (error == OTA_AUTH_ERROR) Serial.println("Auth Failed");
      else if (error == OTA_BEGIN_ERROR) Serial.println("Begin Failed");
      else if (error == OTA_CONNECT_ERROR) Serial.println("Connect Failed");
      else if (error == OTA_RECEIVE_ERROR) Serial.println("Receive Failed");
      else if (error == OTA_END_ERROR) Serial.println("End Failed");
    });

  ArduinoOTA.begin();
  Serial.println("OTA ready");
}

void loop() {
  static bool cleared = false;

  // Clear log file on button press
  if (digitalRead(BUTTON_PIN) == LOW && !cleared) {
    Serial.println("Button pressed! Clearing log...");
    if (SD.exists("/log.csv")) {
      SD.remove("/log.csv");
      Serial.println("log.csv deleted");
    } else {
      Serial.println("No log file to delete");
    }
    cleared = true;
  }

  // Reset flag when button released
  if (digitalRead(BUTTON_PIN) == HIGH) {
    cleared = false;
  }

  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= interval) {
    digitalWrite(on_off_PIN, HIGH);
    previousMillis = currentMillis;
    delay(1000);  // Wait before reading sensor

    float temp = dht.readTemperature();
    float hum = dht.readHumidity();

    if(temp <= tempaim+0.1){
      digitalWrite(14, LOW); //turn off fridge
    }
    if(temp >= (tempaim+0.5)){
      digitalWrite(14, HIGH); //turn on the fridge
    }

    if (isnan(temp) || isnan(hum)) {
      Serial.println("Failed to read from DHT!");
      return;
    }

    String data = String(millis()) + "," + String(temp) + "," + String(hum) + "\n";
    Serial.print("Logging: ");
    Serial.print(data);

    File logFile = SD.open("/log.csv", FILE_APPEND);
    if (!logFile) {
      Serial.println("Failed to open file for writing");
      return;
    }
    logFile.print(data);
    logFile.close();

    // Display on OLED
    display.clearDisplay();
    display.setTextSize(1);
    display.setCursor(0,0);
    display.print("Temperatures: ");
    display.setTextSize(2);
    display.setCursor(0,10);
    display.print(temp);
    display.setTextSize(1);
    display.cp437(true);
    display.write(167);
    display.setTextSize(2);
    display.print("C");

    display.setTextSize(1);
    display.setCursor(0, 35);
    display.print("Humidity: ");
    display.setTextSize(2);
    display.setCursor(0, 45);
    display.print(hum);
    display.print(" %");

    display.display();
    digitalWrite(on_off_PIN, LOW);
  }
  
  server.handleClient();  // Handle web server requests
  ArduinoOTA.handle();    // Handle OTA updates
}
